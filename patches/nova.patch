diff --git a/nova/openstack/common/rpc/__init__.py b/nova/openstack/common/rpc/__init__.py
index d2faff3..1db1e28 100644
--- a/nova/openstack/common/rpc/__init__.py
+++ b/nova/openstack/common/rpc/__init__.py
@@ -62,7 +62,15 @@ rpc_opts = [
 
 cfg.CONF.register_opts(rpc_opts)
 
+import oboe
 
+def get_params(func, f_args, f_kwargs, ret):
+    return {'RemoteAction': f_args[2]['method'],
+            'RemoteController': 'RPC',
+            'RemoteProtocol': 'RPC',
+            'IsService': True}
+
+@oboe.Context.log_method('rpc', store_backtrace=True, entry_kvs={'Method': 'create_connection'})
 def create_connection(new=True):
     """Create a connection to the message bus used for rpc.
 
@@ -79,6 +87,7 @@ def create_connection(new=True):
     return _get_impl().create_connection(cfg.CONF, new=new)
 
 
+@oboe.Context.log_method('rpc', store_backtrace=True, entry_kvs={'Method': 'call'}, callback=get_params)
 def call(context, topic, msg, timeout=None):
     """Invoke a remote method that returns something.
 
@@ -102,6 +111,7 @@ def call(context, topic, msg, timeout=None):
     return _get_impl().call(cfg.CONF, context, topic, msg, timeout)
 
 
+@oboe.Context.log_method('rpc', store_backtrace=True, entry_kvs={'Method': 'cast'}, callback=get_params)
 def cast(context, topic, msg):
     """Invoke a remote method that does not return anything.
 
@@ -120,6 +130,7 @@ def cast(context, topic, msg):
     return _get_impl().cast(cfg.CONF, context, topic, msg)
 
 
+@oboe.Context.log_method('rpc', store_backtrace=True, entry_kvs={'Method': 'fanout_cast'}, callback=get_params)
 def fanout_cast(context, topic, msg):
     """Broadcast a remote method invocation with no return.
 
@@ -141,6 +152,7 @@ def fanout_cast(context, topic, msg):
     return _get_impl().fanout_cast(cfg.CONF, context, topic, msg)
 
 
+@oboe.Context.log_method('rpc', store_backtrace=True, entry_kvs={'Method': 'multicall'}, callback=get_params)
 def multicall(context, topic, msg, timeout=None):
     """Invoke a remote method and get back an iterator.
 
@@ -171,6 +183,7 @@ def multicall(context, topic, msg, timeout=None):
     return _get_impl().multicall(cfg.CONF, context, topic, msg, timeout)
 
 
+@oboe.Context.log_method('rpc', store_backtrace=True, entry_kvs={'Method': 'notify'}, callback=get_params)
 def notify(context, topic, msg):
     """Send notification event.
 
diff --git a/nova/openstack/common/rpc/dispatcher.py b/nova/openstack/common/rpc/dispatcher.py
index 34c2954..0ee072e 100644
--- a/nova/openstack/common/rpc/dispatcher.py
+++ b/nova/openstack/common/rpc/dispatcher.py
@@ -82,7 +82,10 @@ minimum version that supports the new parameter should be specified.
 """
 
 from nova.openstack.common.rpc import common as rpc_common
+import oboe
 
+oboe.config['tracing_mode'] = 'always'
+oboe.config['sample_rate'] = 1.0
 
 class RpcDispatcher(object):
     """Dispatch rpc messages according to the requested API version.
@@ -131,20 +134,27 @@ class RpcDispatcher(object):
         if not version:
             version = '1.0'
 
-        had_compatible = False
-        for proxyobj in self.callbacks:
-            if hasattr(proxyobj, 'RPC_API_VERSION'):
-                rpc_api_version = proxyobj.RPC_API_VERSION
+        oboe.start_trace('nova', keys={'HTTP-Host': 'RPC', 'URL': str(method)})
+        try:
+            had_compatible = False
+            for proxyobj in self.callbacks:
+                if hasattr(proxyobj, 'RPC_API_VERSION'):
+                    rpc_api_version = proxyobj.RPC_API_VERSION
+                else:
+                    rpc_api_version = '1.0'
+                is_compatible = self._is_compatible(rpc_api_version, version)
+                had_compatible = had_compatible or is_compatible
+                if not hasattr(proxyobj, method):
+                    continue
+                if is_compatible:
+                    return getattr(proxyobj, method)(ctxt, **kwargs)
+
+            if had_compatible:
+                raise AttributeError("No such RPC function '%s'" % method)
             else:
-                rpc_api_version = '1.0'
-            is_compatible = self._is_compatible(rpc_api_version, version)
-            had_compatible = had_compatible or is_compatible
-            if not hasattr(proxyobj, method):
-                continue
-            if is_compatible:
-                return getattr(proxyobj, method)(ctxt, **kwargs)
-
-        if had_compatible:
-            raise AttributeError("No such RPC function '%s'" % method)
-        else:
-            raise rpc_common.UnsupportedRpcVersion(version=version)
+                raise rpc_common.UnsupportedRpcVersion(version=version)
+        except Exception, e:
+            oboe.Context.log_exception()
+            raise
+        finally:
+            oboe.end_trace('nova')
diff --git a/nova/wsgi.py b/nova/wsgi.py
index afb5303..5e4a8c0 100644
--- a/nova/wsgi.py
+++ b/nova/wsgi.py
@@ -34,6 +34,13 @@ from nova import exception
 from nova import flags
 from nova.openstack.common import log as logging
 
+# Imports for Tracelytics/Oboe
+try:
+    from oboeware import OboeMiddleware
+    import oboe
+except ImportError:
+    sys.exc_clear()
+# End imports for Tracelytics/Oboe
 
 FLAGS = flags.FLAGS
 LOG = logging.getLogger(__name__)
@@ -313,6 +320,10 @@ class Router(object):
         self.map = mapper
         self._router = routes.middleware.RoutesMiddleware(self._dispatch,
                                                           self.map)
+        if 'oboe' in sys.modules:
+            oboe.config['tracing_mode'] = 'always'
+            oboe.config['sample_rate'] = 1.0
+            self._router = OboeMiddleware(self._router, {}, layer='nova')
 
     @webob.dec.wsgify(RequestClass=Request)
     def __call__(self, req):
